{{/*
SPDX-FileCopyrightText: 2024-2025 Univention GmbH
SPDX-License-Identifier: AGPL-3.0-only
*/}}
---
{{/*
Generate a self-signed certificate for the SAML message signing if none is provided.

TODO: This has the drawback of generating a new certificate on every run of
"helm upgrade". There is a pending refactoring to move the SAML certificate and
also the optional additional CA Certificate into separate Secrets. Then the
"lookup" function of Helm can be used to avoid re-generating the certificate.

*/}}
{{- if and .Values.mountSecrets (not .Values.global.nubusDeployment) }}
  {{- if not (or .Values.umcServer.certPem .Values.umcServer.privateKey) }}
    {{- $cert := genSelfSignedCert "saml" nil nil 365 }}
    {{- $_ := set .Values.umcServer "certPem" $cert.Cert }}
    {{- $_ := set .Values.umcServer "privateKey" $cert.Key }}
  {{- end }}
{{- end }}

kind: "Secret"
apiVersion: "v1"
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" $ | quote }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
    {{- if $.Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" $.Values.additionalLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if $.Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $.Values.additionalAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
stringData:
  ldap_secret: {{ .Values.umcServer.ldapSecret | quote }}
  machine_secret: {{ .Values.umcServer.machineSecret | quote }}
  ca_cert: {{ .Values.umcServer.caCert | quote }}
  cert_pem: {{ .Values.umcServer.certPem | quote }}
  private_key: {{ .Values.umcServer.privateKey | quote }}
  db_password: {{ .Values.postgresql.auth.password | quote }}
  memcached_password: {{ .Values.memcached.auth.password | quote }}
  smtp_password: {{ .Values.umcServer.smtpSecret | quote }}

...
