# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

---
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: "StatefulSet"
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" .) | nindent 4 }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets  }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: "prepare-config"
          {{- if .Values.containerSecurityContextInit.enabled }}
          securityContext: {{- omit .Values.containerSecurityContextInit "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          command:
            - bash
            - -c
            - |
              /entrypoint.d/50-entrypoint.sh
              mkdir -p /target/var/lib/sss
              cp -a /var/lib/sss/* /target/var/lib/sss/
              if [[ ! -d /target/var/lib/sss/pipes/private ]]; then
                mkdir -p /target/var/lib/sss/pipes/private
              fi
              cp -a /etc/nsswitch.conf /target/etc/nsswitch.conf
              chmod 755 -R /target/var/lib/sss/pipes/private/
              chown sssd:sssd -R /target/var/lib/sss/pipes /target/var/lib/sss/db /etc/sssd
              chmod 0600 /etc/sssd/sssd.conf
              chown sssd:sssd /etc/pam.d/univention-management-console
              chmod 0644 /etc/pam.d/univention-management-console
          volumeMounts:
            - name: "etc-ldap"
              mountPath: "/etc/ldap"
            - name: "etc-pam"
              mountPath: "/etc/pam.d"
            - name: "etc-sssd"
              mountPath: "/etc/sssd"
            - name: "nsswitch-conf"
              mountPath: "/target/etc"
            - name: "etc-univention-ssl"
              mountPath: "/etc/univention/ssl"
            - name: "etc-univention-reports"
              mountPath: "/etc/univention/directory/reports"
            - name: "acl-cache"
              mountPath: "/var/cache/univention-management-console/acls"
            - name: "config-cache"
              mountPath: "/var/cache/univention-config"
            - name: "univention-logs"
              mountPath: "/var/log/univention"
            - name: "var-lib-sss"
              mountPath: "/target/var/lib/sss"
            - name: "var-www-univention"
              mountPath: "/var/www/univention"
            - name: "run"
              mountPath: "/run"
            - name: "tmp"
              mountPath: "/tmp"
            - name: "usr-share-umc-saml-idp"
              mountPath: "/usr/share/univention-management-console/saml/idp"
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
            {{- if (include "umc-server.configMapUcr" .) }}
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            {{- end }}
            {{- if and .Values.mountSecrets (not .Values.global.nubusDeployment) }}
            - name: "secrets"
              mountPath: "{{ .Values.umcServer.secretMountPath }}"
            {{- else }}
            {{- if .Values.ldap.existingSecret.name  }}
            - name: {{ printf "%s-volume" (tpl .Values.ldap.existingSecret.name . ) | quote }}
              mountPath: "/etc/ldap.secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.existingSecret "key" "ldapPasswordKey") }}
              readOnly: true
            - name: {{ printf "%s-volume" (tpl .Values.ldap.existingSecret.name . ) | quote }}
              mountPath: "/etc/machine.secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.existingSecret "key" "machinePasswordKey") }}
              readOnly: true
            {{- end }}
            {{- if .Values.smtp.existingSecret.name }}
            - name: {{ printf "%s-volume" (tpl .Values.smtp.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/smtp_secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.smtp.existingSecret "key" "password") }}
              readOnly: true
            {{- end }}
            {{- if .Values.postgresql.auth.existingSecret.name }}
            - name: {{ printf "%s-volume" (tpl .Values.postgresql.auth.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/db_password"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.postgresql.auth.existingSecret "key" "password") }}
              readOnly: true
            {{- end }}
            {{- if .Values.memcached.auth.existingSecret.name }}
            - name: {{ printf "%s-volume" (tpl .Values.memcached.auth.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/memcached_password"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.memcached.auth.existingSecret "key" "memcached-password") }}
              readOnly: true
            {{- end }}
            {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/ca_cert"
              subPath: {{ .Values.ldap.tlsSecret.caCertKey | quote }}
              readOnly: true
            {{- end }}
            {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/cert_pem"
              subPath: {{ .Values.ldap.tlsSecret.certificateKey | quote }}
              readOnly: true
            {{- end }}
            {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/private_key"
              subPath: {{ .Values.ldap.tlsSecret.privateKeyKey | quote }}
              readOnly: true
            {{- end }}
            {{- end }}
        - name: "load-internal-plugins"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/udm-modules /target/udm-hooks.d /target/udm-syntax.d /target/udm-handlers /target/umc-modules /target/umc-icons /target/umc-i18n
              cp -Rv /usr/share/univention-management-console/i18n/* /target/umc-i18n
              cp -Rv /usr/share/univention-management-console/modules/* /target/umc-modules
              cp -Rv /usr/lib/python3/dist-packages/univention/udm/modules/* /target/udm-modules
              cp -Rv /usr/lib/python3/dist-packages/univention/admin/hooks.d/* /target/udm-hooks.d
              cp -Rv /usr/lib/python3/dist-packages/univention/admin/syntax.d/* /target/udm-syntax.d
              cp -Rv /usr/lib/python3/dist-packages/univention/admin/handlers/* /target/udm-handlers
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
        {{- $systemExtensions := default (list) (coalesce .Values.systemExtensions .Values.global.systemExtensions) -}}
        {{- $extensions := default (list) (coalesce .Values.extensions .Values.global.extensions) -}}
        {{- range (concat $systemExtensions $extensions) }}
        - name: "load-{{ .name }}-extension"
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .image.registry $.Values.global.imageRegistry }}/{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ coalesce .image.imagePullPolicy $.Values.global.imagePullPolicy | quote }}
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" $.Values.resources "context" $) | nindent 12 }}
        {{- end }}

      containers:
        - name: "umc-server"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.image }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          command:
            - /bin/bash
            - -c
            - |
              /usr/sbin/univention-management-console-server \
              --no-daemonize-module-processes \
              --log-file stdout
          env:
            - name: "SELF_SERVICE_DB_SECRET"
              valueFrom:
                secretKeyRef:
                  {{/* Special case handling so that it is possible to use the bundled postgresql for development purposes
                       by setting .Values.postgresql.auth.existingSecret to null. */}}
                  {{- if and .Values.postgresql.auth.existingSecret .Values.postgresql.auth.existingSecret.name }}
                  name: {{ tpl .Values.postgresql.auth.existingSecret.name . }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.postgresql.auth.existingSecret "key" "password") }}
                  {{- else }}
                  name: {{ include "common.names.fullname" . }}
                  key: "db_password"
                  {{- end }}
            - name: "SELF_SERVICE_MEMCACHED_SECRET"
              valueFrom:
                secretKeyRef:
                  {{- if .Values.memcached.auth.existingSecret.name }}
                  name: {{ tpl .Values.memcached.auth.existingSecret.name . }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.memcached.auth.existingSecret "key" "memcached-password") }}
                  {{- else }}
                  name: {{ include "common.names.fullname" . }}
                  key: "memcached_password"
                  {{- end }}
            - name: "PYTHONDONTWRITEBYTECODE"
              value: "1"
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          volumeMounts:
            - name: "etc-ldap"
              mountPath: "/etc/ldap"
              readOnly: true
            - name: "etc-pam"
              mountPath: "/etc/pam.d"
              readOnly: true
            - name: "etc-sssd"
              mountPath: "/etc/sssd"
              readOnly: true
            - name: "etc-univention-ssl"
              mountPath: "/etc/univention/ssl"
              readOnly: true
            - name: "etc-univention-reports"
              mountPath: "/etc/univention/directory/reports"
              readOnly: true
            - name: "acl-cache"
              mountPath: "/var/cache/univention-management-console/acls"
            - name: "config-cache"
              mountPath: "/var/cache/univention-config"
              readOnly: true
            - name: "univention-logs"
              mountPath: "/var/log/univention"
            - name: "var-lib-sss"
              mountPath: "/usr/local/var/lib/sss"
            - name: "var-lib-sss-mc"
              mountPath: "/usr/local/var/lib/sss/mc"
            - name: "var-lib-sss-pubconf"
              mountPath: "/usr/local/var/lib/sss/pubconf"
            - name: "var-www-univention"
              mountPath: "/var/www/univention"
              readOnly: true
            - name: "run"
              mountPath: "/run"
            - name: "tmp"
              mountPath: "/tmp"
            - name: "usr-share-umc-saml-idp"
              mountPath: "/usr/share/univention-management-console/saml/idp"
              readOnly: true
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
            {{- if (include "umc-server.configMapUcr" .) }}
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            {{- end }}
            {{- if and .Values.mountSecrets (not .Values.global.nubusDeployment) }}
            - name: "secrets"
              mountPath: "{{ .Values.umcServer.secretMountPath }}"
            {{- else }}
            {{- if .Values.ldap.existingSecret.name  }}
            - name: {{ printf "%s-volume" (tpl .Values.ldap.existingSecret.name . ) | quote }}
              mountPath: "/etc/ldap.secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.existingSecret "key" "ldapPasswordKey") }}
              readOnly: true
            - name: {{ printf "%s-volume" (tpl .Values.ldap.existingSecret.name . ) | quote }}
              mountPath: "/etc/machine.secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.existingSecret "key" "machinePasswordKey") }}
              readOnly: true
            {{- end }}
            {{- if .Values.smtp.existingSecret.name }}
            - name: {{ printf "%s-volume" (tpl .Values.smtp.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/smtp_secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.smtp.existingSecret "key" "password") }}
              readOnly: true
            {{- end }}
            {{- if .Values.postgresql.auth.existingSecret.name }}
            - name: {{ printf "%s-volume" (tpl .Values.postgresql.auth.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/db_password"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.postgresql.auth.existingSecret "key" "password") }}
              readOnly: true
            {{- end }}
            {{- if .Values.memcached.auth.existingSecret.name }}
            - name: {{ printf "%s-volume" (tpl .Values.memcached.auth.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/memcached_password"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.memcached.auth.existingSecret "key" "memcached-password") }}
              readOnly: true
            {{- end }}
            {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/ca_cert"
              subPath: {{ .Values.ldap.tlsSecret.caCertKey | quote }}
              readOnly: true
            {{- end }}
            {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/cert_pem"
              subPath: {{ .Values.ldap.tlsSecret.certificateKey | quote }}
              readOnly: true
            {{- end }}
            {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.umcServer.secretMountPath }}/private_key"
              subPath: {{ .Values.ldap.tlsSecret.privateKeyKey | quote }}
              readOnly: true
            {{- end }}
            {{- end }}
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/udm/modules
              subPath: udm-modules
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/admin/hooks.d
              subPath: udm-hooks.d
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/admin/syntax.d
              subPath: udm-syntax.d
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/admin/handlers
              subPath: udm-handlers
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/
              subPath: umc-icons
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/share/univention-management-console/modules/
              subPath: umc-modules
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/share/univention-management-console/i18n
              subPath: umc-i18n
              readOnly: true
            - name: passwordreset-email-body
              mountPath: /usr/share/univention-self-service/email_bodies
              readOnly: true
          ports:
            {{- range $key, $value := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.containerPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          {{- if .Values.probes.liveness }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.probes.liveness "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.probes.readiness }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.probes.readiness "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.probes.startup }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.probes.startup "context" $) | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        - name: "sssd-sidecar"
          {{- if .Values.containerSecurityContextSssd.enabled }}
          securityContext: {{- omit .Values.containerSecurityContextSssd "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.image }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          command:
            - sh
            - -c
            - |
              sssd -i --logger stderr --debug-level {{ .Values.sssd.debugLevel }} -c /etc/sssd/sssd.conf
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
          volumeMounts:
            - name: "etc-ldap"
              mountPath: "/etc/ldap"
              readOnly: true
            - name: "nsswitch-conf"
              mountPath: "/etc/nsswitch.conf"
              subPath: "nsswitch.conf"
              readOnly: true
            - name: "etc-pam"
              mountPath: "/etc/pam.d"
              readOnly: true
            - name: "etc-sssd"
              mountPath: "/etc/sssd"
              readOnly: true
            - name: "etc-univention-ssl"
              mountPath: "/etc/univention/ssl"
              readOnly: true
            - name: "run"
              mountPath: "/run"
            - name: "sssd-run"
              mountPath: "/usr/local/var/run/sssd"
            - name: "usr-share-umc-saml-idp"
              readOnly: true
              mountPath: "/usr/share/univention-management-console/saml/idp"
            - name: "var-lib-sss"
              mountPath: "/usr/local/var/lib/sss"
            - name: "var-lib-sss-mc"
              mountPath: "/usr/local/var/lib/sss/mc"
            - name: "var-lib-sss-pubconf"
              mountPath: "/usr/local/var/lib/sss/pubconf"
            - name: "sssd-db"
              mountPath: "/usr/local/var/lib/sss/db/"
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.sssdProbes.liveness }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.sssdProbes.liveness "context" .) | nindent 12 }}
          {{- end }}
          {{- if .Values.sssdProbes.readiness }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.sssdProbes.readiness "context" .) | nindent 12 }}
          {{- end }}
      volumes:
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
        - name: "nsswitch-conf"
          emptyDir:
            medium: "Memory"
        - name: "etc-ldap"
          emptyDir:
            medium: "Memory"
        - name: "etc-pam"
          emptyDir:
            medium: "Memory"
        - name: "etc-sssd"
          emptyDir:
            medium: "Memory"
        - name: "etc-univention-ssl"
          emptyDir:
            medium: "Memory"
        - name: "etc-univention-reports"
          emptyDir:
            medium: "Memory"
        - name: "acl-cache"
          emptyDir:
            medium: "Memory"
        - name: "config-cache"
          emptyDir:
            medium: "Memory"
        - name: "univention-logs"
          emptyDir:
            medium: "Memory"
        - name: "var-lib-sss"
          emptyDir: {}
        - name: "var-lib-sss-mc"
          emptyDir: {}
        - name: "var-lib-sss-pubconf"
          emptyDir: {}
        - name: "var-www-univention"
          emptyDir:
            medium: "Memory"
        - name: "run"
          emptyDir:
            medium: "Memory"
        - name: "sssd-run"
          emptyDir:
            medium: "Memory"
        - name: "tmp"
          emptyDir:
            medium: "Memory"
        - name: "usr-share-umc-saml-idp"
          emptyDir:
            medium: "Memory"
        - name: "sssd-db"
          emptyDir:
            medium: "Memory"
        {{- if (include "umc-server.configMapUcr" .) }}
        - name: "config-map-ucr"
          configMap:
            name: {{ include "umc-server.configMapUcr" . | quote }}
        {{- end }}
        {{- if and .Values.mountSecrets (not .Values.global.nubusDeployment) }}
        - name: "secrets"
          secret:
            secretName: {{ include "common.names.fullname" . | quote }}
        {{- else }}
        {{- if .Values.ldap.existingSecret.name  }}
        - name: {{ printf "%s-volume" (tpl .Values.ldap.existingSecret.name . ) | quote }}
          secret:
            secretName: {{ tpl .Values.ldap.existingSecret.name . }}
        {{- end }}
        {{- if .Values.smtp.existingSecret.name }}
        - name: {{ printf "%s-volume" (tpl .Values.smtp.existingSecret.name . ) | quote }}
          secret:
            secretName: {{ tpl .Values.smtp.existingSecret.name . }}
        {{- end }}
        {{- if .Values.postgresql.auth.existingSecret.name }}
        - name: {{ printf "%s-volume" (tpl .Values.postgresql.auth.existingSecret.name . ) | quote }}
          secret:
            secretName: {{ tpl .Values.postgresql.auth.existingSecret.name . }}
        {{- end }}
        {{- if .Values.memcached.auth.existingSecret.name }}
        - name: {{ printf "%s-volume" (tpl .Values.memcached.auth.existingSecret.name . ) | quote }}
          secret:
            secretName: {{ tpl .Values.memcached.auth.existingSecret.name . }}
        {{- end }}
        {{- if (include "umc-server.ldap.tlsSecret.name" . ) }}
        - name: {{ printf "%s-volume" (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
          secret:
            secretName: {{ (include "umc-server.ldap.tlsSecret.name" . ) | quote }}
        {{- end }}
        {{- end }}
        - name: passwordreset-email-body
          configMap:
            name: {{ include "common.names.fullname" . }}-pw-reset-email-body
            defaultMode: 0444
        - name: plugin-targets
          emptyDir: {}
