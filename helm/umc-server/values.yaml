# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023 Univention GmbH

---
# Default values for univention-management-console-server
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global values
affinity: {}
environment: {}
fullnameOverride: ""
mountSecrets: true
mountUcr: true
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
replicaCount: 1
securityContext: {}
tolerations: []

# -- Additional custom labels to add to all deployed objects.
additionalLabels: {}

global:
  # -- Indicates wether this chart is part of a Nubus deployment.
  nubusDeployment: false
  # -- Container registry address.
  imageRegistry: "artifacts.software-univention.de"
  # -- ConfigMap name to read default UCR values from.
  configMapUcrDefaults: null
  # -- ConfigMap name to read UCR values from.
  configMapUcr: null
  # -- ConfigMap name to read forced UCR values from.
  configMapUcrForced: null

  # -- Allows to configure extensions globally.
  extensions: []
  # -- Allows to configure system extensions globally.
  systemExtensions: []

  # -- Credentials to fetch images from private registry.
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #
  # imagePullSecrets:
  #   - "docker-registry"
  imagePullSecrets: []
    # -- Configuration for the PostgreSQL database
  postgresql:
    connection:
      host: ""
      port: 5432

# -- Extensions to load. This will override the configuration in
# `global.extensions`.
extensions: []

# -- Allows to configure the system extensions to load. This is intended for
# internal usage, prefer to use `extensions` for user configured extensions.
# This value will override the configuration in `global.systemExtensions`.
systemExtensions: []

# Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  # -- Enable container privileged escalation.
  allowPrivilegeEscalation: false
  # -- Security capabilities for container.
  capabilities:
    drop:
      - "ALL"
  # -- Enable security context.
  enabled: false
  # -- Process user id.
  runAsUser: 1000
  # -- Process group id.
  runAsGroup: 1000
  # Set Seccomp profile.
  seccompProfile:
    # -- Disallow custom Seccomp profile by setting it to RuntimeDefault.
    type: "RuntimeDefault"
  # -- Mounts the container's root filesystem as read-only.
  readOnlyRootFilesystem: true
  # -- Run container as a user.
  runAsNonRoot: true

# Pod Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  # -- Enable security context.
  enabled: false

  # -- If specified, all processes of the container are also part of the supplementary group.
  fsGroup: 1000

  # -- Change ownership and permission of the volume before being exposed inside a Pod.
  fsGroupChangePolicy: "Always"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
  ##
  automountServiceAccountToken: false
  # -- Additional custom labels for the ServiceAccount.
  labels: {}

# -- Optionally specify a secret to create (primarily intended to be used in development environments to provide custom certificates)
extraSecrets: []

# -- Application configuration of the Univention Management Console Server
umcServer:
  # -- Path to file with the LDAP secret.
  ldapSecretFile: "/var/secrets/ldap_secret"
  # -- Path to file with the LDAP machine secret.
  machineSecretFile: "/var/secrets/machine_secret"
  # -- Additional CA Certificate to trust.
  # The value is optional.
  caCert: ""
  # -- Path to file with the CA certificate.
  caCertFile: "/var/secrets/ca_cert"
  # -- Certificate used in the context of SAML to verify metadata signatures.
  # A self-signed certificate will be generated together with the
  # private key if none is provided.
  certPem: null
  # -- The private key related to "certPem" used to sign messages in the context
  # of SAML.
  privateKey: null
  # -- Path to file with the certificate (.pem).
  certPemFile: "/var/secrets/cert_pem"
  # -- Path to file with the certificate's private key (.key).
  privateKeyFile: "/var/secrets/private_key"
  # -- Path to file with SMTP password.
  smtpSecretFile: "/var/secrets/smtp_password"
  # -- Path to mount the secrets to.
  secretMountPath: "/var/secrets"
  # -- smtpSecret the password for the SMTP server.
  smtpSecret: ""

## -- Self-service configuration
selfService:
  # -- Content of the email sent for new user sign-ups and password reset requests.
  # The text can contain the following strings which will be substituted accordingly:
  # * {username}: The user wishing to reset his/her password.
  # * {token}: The token to be sent.
  # * {link}: Link to the “Password Reset” website.
  # * {tokenlink}: Link to the “Password Reset” website with the user name and token already entered.
  passwordresetEmailBody: |
    Dear user {username},

    we have received a password reset request for your account. If you did not
    wish to change your password, you can safely ignore this message.

    To change your password please follow this link:

    {tokenlink}

    If the link does not work, you can go to

    {link}

    and enter the following token manually:

    {token}

    Greetings from your password self service system.

## Kubernetes ingress
ingress:
  # -- Enable creation of Ingress.
  enabled: true

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable.
  host: ""

  # -- The Ingress controller class name.
  ingressClassName: ""

  # -- Define ingress annotations.
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: "/$2$3"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-UMC-HTTPS 'on';

  # -- Define the Ingress paths.
  paths:
    # - pathType: Prefix
    #   path: /univention/auth
    # - pathType: Prefix
    #   path: /univention/saml
    # - pathType: Prefix
    #   path: /univention/get
    # - pathType: Prefix
    #   path: /univention/set
    # - pathType: Prefix
    #   path: /univention/command
    # - pathType: Prefix
    #   path: /univention/upload
    # - pathType: Prefix
    #   path: /univention/logout
      - path: /(univention)/(auth|logout|saml|get|set|command|upload)(.*)
        pathType: ImplementationSpecific

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""

# -- Credentials to fetch images from private registry.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
# imagePullSecrets:
#   - "docker-registry"
imagePullSecrets: []

## Docker image
image:
  registry: ""
  repository: "nubus-dev/images/umc-server"
  imagePullPolicy: "IfNotPresent"
  tag: "latest"
  ## Define image sha256 as an alternative to `tag`
  # sha256:


## Container deployment probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 3
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 3
    periodSeconds: 10
    failureThreshold: 30
    successThreshold: 1


## Deployment resources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "4Gi"
    cpu: "4"

## Kubernetes Service
service:
  enabled: true
  type: "ClusterIP"
  ports:
    http:
      containerPort: 8090
      port: 80
      protocol: "TCP"


# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

autoscaling:
  enabled: false


# -- Memcached settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/memcached
memcached:
  # -- Set to `true` if you want Memcached to be installed as well.
  #
  # When setting this to `false` be sure to also adjust `memcached.auth.password` below,
  # and the connection settings in the stack-data chart:
  # `stackDataContext.umcMemcachedHostname` and `stackDataContext.umcMemcachedUsername`
  bundled: true
  # nameOverride: "umc-server-memcached"
  # -- Connection parameters. These are required if an external service should be used (bundled is set to `false`).
  connection:
    # -- Memcached host.
    host: ""
    # -- Memcached port.
    port: ""
  auth:
    # -- This parameter is only used by the bundled memcached.
    enabled: true
    # -- Memcached username. This parameter is only used by the bundled memcached.
    username: "selfservice"
    # -- Memcached password.
    password: ""
    # -- Memcached existing password secret (Must contain the key `memcached-password`). This parameter is only used by the bundled memcached.
    existingPasswordSecret: ""
    # -- Memcached password secret reference.
    credentialSecret:
      name: ""
      key: "memcached-password"
  # -- Defaults from /ucs/management/univention-self-service/conffiles/etc/memcached_univention-self-service.conf
  #
  # These parameters are only used by the bundled memcached.
  extraEnvVars:
    - name: "MEMCACHED_CACHE_SIZE"
      value: "64"
    - name: "MEMCACHED_EXTRA_FLAGS"
      value: "--disable-evictions"

# -- PostgreSQL settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Set to `true` if you want PostgreSQL to be installed as well.
  bundled: false
  # -- Connection parameters. These are required if an external service should be used (bundled is set to `false`).
  connection:
    # -- PostgreSQL host.
    host: ""
    # -- PostgreSQL port.
    port: ""
  auth:
    # -- PostgreSQL user. If bundled is set to `true` this user will be created.
    username: "selfservice"
    # -- PostgreSQL database. If bundled is set to `true` this database will be created.
    database: "selfservice"
    # -- PostgreSQL user password if bundled is set to `true`.
    password: ""
    # -- PostgreSQL admin password if bundled is set to `true`.
    postgresPassword: ""
    # -- PostgreSQL password secret reference.
    credentialSecret:
      name: ""
      key: "password"

ldap:
  tlsSecret:
    name: ""
    caCertKey: "ca.crt"
    privateKeyKey: "tls.key"
    certificateKey: "tls.crt"
  credentialSecret:
    name: ""
    ldapPasswordKey: "ldap.secret"
    machinePasswordKey: "machine.secret"

smtp:
  credentialSecret:
    name: ""
    key: "password"


...
