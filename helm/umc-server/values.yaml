# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2023 Univention GmbH

---
# Default values for univention-management-console-server
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global values
affinity: {}
environment: {}
fullnameOverride: ""
mountSecrets: true
mountUcr: true
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
securityContext: {}
tolerations: []

global:
  # -- Indicates wether this chart is part of a Nubus deployment.
  nubusDeployment: false
  # -- ConfigMap name to read default UCR values from.
  configMapUcrDefaults: null
  # -- ConfigMap name to read UCR values from.
  configMapUcr: null
  # -- ConfigMap name to read forced UCR values from.
  configMapUcrForced: null
  # -- Credentials to fetch images from private registry.
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #
  # imagePullSecrets:
  #   - "docker-registry"
  imagePullSecrets: []

# -- Application configuration of the Univention Management Console Server
umcServer:
  # -- Path to file with the LDAP secret.
  ldapSecretFile: "/var/secrets/ldap_secret"
  # -- Path to file with the LDAP machine secret.
  machineSecretFile: "/var/secrets/machine_secret"
  # -- Additional CA Certificate to trust.
  # The value is optional.
  caCert: null
  # -- Path to file with the CA certificate.
  caCertFile: "/var/secrets/ca_cert"
  # -- Certificate used in the context of SAML to verify metadata signatures.
  # A self-signed certificate will be generated together with the
  # private key if none is provided.
  certPem: null
  # -- The private key related to "certPem" used to sign messages in the context
  # of SAML.
  privateKey: null
  # -- Path to file with the certificate (.pem).
  certPemFile: "/var/secrets/cert_pem"
  # -- Path to file with the certificate's private key (.key).
  privateKeyFile: "/var/secrets/private_key"
  # -- Path to file with SMTP password.
  smtpSecretFile: "/var/secrets/smtp_password"
  # -- Path to mount the secrets to.
  secretMountPath: "/var/secrets"
  # -- Optional reference to a different secret for credentials
  ldapCredentialSecret:
    name: ""
    ldapPasswordKey: "ldap.secret"
    machinePasswordKey: "machine.secret"
  smtpCredentialSecret:
    name: ""
    key: "password"
  postgresqlCredentialSecret:
    name: ""
    key: "password"
  memcachedCredentialSecret:
    name: ""
    key: "password"

## Kubernetes ingress
ingress:
  # -- Set this to `true` in order to enable the installation on Ingress related objects.
  enabled: false
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/univention(/.*)$ $1 break;
    nginx.org/location-snippets: |
      rewrite ^/univention(/.*)$ $1 break;
    nginx.org/mergeable-ingress-type: "minion"
  # -- The hostname. This parameter has to be supplied. Example `portal.example`.
  host: null
  # -- The path configuration. The default only grabs what is handled by the UMC server.
  paths:
    # TODO: Exact vs. Prefix
    - pathType: Prefix
      path: /univention/auth
    - pathType: Prefix
      path: /univention/saml
    - pathType: Prefix
      path: /univention/get
    - pathType: Prefix
      path: /univention/set
    - pathType: Prefix
      path: /univention/command
    - pathType: Prefix
      path: /univention/upload
    - pathType: Prefix
      path: /univention/logout
  tls:
    enabled: true
    secretName: ""

# -- Credentials to fetch images from private registry.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
# imagePullSecrets:
#   - "docker-registry"
imagePullSecrets: []

## Docker image
image:
  registry: "gitregistry.knut.univention.de"
  repository: "univention/customers/dataport/upx/container-umc/umc-server"
  imagePullPolicy: "IfNotPresent"
  tag: "latest"
  ## Define image sha256 as an alternative to `tag`
  # sha256:


## Container deployment probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 3
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 3
    periodSeconds: 10
    failureThreshold: 30
    successThreshold: 1


## Deployment resources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "4Gi"
    cpu: "4"

## Kubernetes Service
service:
  enabled: true
  type: "ClusterIP"
  ports:
    http:
      containerPort: 8090
      port: 80
      protocol: "TCP"


# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

autoscaling:
  enabled: false


# -- Memcached settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/memcached
memcached:
  # -- Set to `true` if you want Memcached to be installed as well.
  #
  # When setting this to `false` be sure to also adjust `memcached.auth.password` below,
  # and the connection settings in the stack-data chart:
  # `stackDataContext.umcMemcachedHostname` and `stackDataContext.umcMemcachedUsername`
  bundled: false
  auth:
    # -- This parameter is only used by the bundled memcached.
    enabled: true
    # -- Memcached username. This parameter is only used by the bundled memcached.
    username: "selfservice"
    # -- Memcached password.
    password: ""
  # -- Defaults from /ucs/management/univention-self-service/conffiles/etc/memcached_univention-self-service.conf
  #
  # These parameters are only used by the bundled memcached.
  extraEnvVars:
    - name: "MEMCACHED_CACHE_SIZE"
      value: "64"
    - name: "MEMCACHED_EXTRA_FLAGS"
      value: "--disable-evictions"


# -- PostgreSQL settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Set to `true` if you want PostgreSQL to be installed as well.
  bundled: false
  # -- Connection parameters. These are required if you use an external database.
  connection:
    host:
    port:
  auth:
    username: "selfservice"
    database: "selfservice"
    password: ""
    postgresPassword: ""

...
