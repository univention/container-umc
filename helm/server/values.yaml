---
# Default values for univention-management-console-server
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Global values
affinity: {}
environment: {}
fullnameOverride: ""
mountSecrets: true
mountUcr: true
nameOverride: ""
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
securityContext: {}
tolerations: []

global:
  configMapUcrDefaults: "stack-data-ums-ucr"
  configMapUcr: "stack-data-swp-ucr"
  configMapUcrForced: null

# -- Application configuration of the Univention Management Console Server
umcServer:
  # -- Path to file with the LDAP secret.
  ldapSecretFile: "/var/secrets/ldap_secret"
  # -- Path to file with the LDAP machine secret.
  machineSecretFile: "/var/secrets/machine_secret"
  # -- Path to file with the CA certificate.
  caCertFile: "/var/secrets/ca_cert"
  # -- Path to file with the certificate (.pem).
  certPemFile: "/var/secrets/cert_pem"
  # -- Path to file with the certificate's private key (.key).
  privateKeyFile: "/var/secrets/private_key"

  # -- Path to file with Memcached password.
  memcachedSecretFile: "/var/secrets/memcached_password"
  # -- Path to file with Postgres password.
  postgresSecretFile: "/var/secrets/db_password"

## Kubernetes ingress
ingress:
  # -- Set this to `true` in order to enable the installation on Ingress related objects.
  enabled: true
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite ^/univention(/.*)$ $1 break;
    nginx.org/location-snippets: |
      rewrite ^/univention(/.*)$ $1 break;
    nginx.org/mergeable-ingress-type: "minion"
  # -- The hostname. This parameter has to be supplied. Example `portal.example`.
  host: null
  # -- The path configuration. The default only grabs what is handled by the UMC server.
  paths:
    # TODO: Exact vs. Prefix
    - pathType: Prefix
      path: /univention/auth
    - pathType: Prefix
      path: /univention/saml
    - pathType: Prefix
      path: /univention/get
    - pathType: Prefix
      path: /univention/set
    - pathType: Prefix
      path: /univention/command
    - pathType: Prefix
      path: /univention/upload
    - pathType: Prefix
      path: /univention/logout
  tls:
    enabled: true
    secretName: ""


## Istio support
istio:
  # -- Set this to `true` in order to enable the installation on Istio related objects.
  enabled: false
  # -- The hostname. This parameter has to be supplied. Example `portal.example`.
  host: null
  virtualService:
    enabled: true
    annotations: {}
    # -- The paths configuration.
    # The default only grabs what is known to be handled by the UMC server.
    paths:
      - match: "prefix"
        path: "/univention/auth/"
        rewrite: "/auth/"
      - match: "prefix"
        path: "/univention/saml/"
        rewrite: "/saml/"
      - match: "prefix"
        path: "/univention/get/"
        rewrite: "/get/"
      - match: "prefix"
        path: "/univention/set/"
        rewrite: "/set/"
      - match: "prefix"
        path: "/univention/command/"
        rewrite: "/command/"
      - match: "prefix"
        path: "/univention/upload/"
        rewrite: "/upload/"
      - match: "prefix"
        path: "/univention/logout/"
        rewrite: "/logout/"
  gateway:
    enabled: false
    annotations:
    selectorIstio: "ingressgateway"
    externalGatewayName: "swp-istio-gateway"
    tls:
      enabled: true
      httpsRedirect: true
      secretName: ""


## Docker image
image:
  registry: "registry.souvap-univention.de"
  repository: "souvap/tooling/images/univention-management-console/umc-server"
  imagePullPolicy: "Always"
  tag: "latest"

  ## Define image sha256 as an alternative to `tag`
  # sha256:


## Container deployment probes
probes:
  liveness:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 3
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1

  readiness:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 3
    periodSeconds: 15
    failureThreshold: 30
    successThreshold: 1


## Deployment resources
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "4Gi"
    cpu: "4"

## Kubernetes Service
service:
  enabled: true
  type: "ClusterIP"
  ports:
    http:
      containerPort: 8090
      port: 80
      protocol: "TCP"

  sessionAffinity:
    enabled: false
    timeoutSeconds: 10800

# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

autoscaling:
  enabled: false


# -- Memcached settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/memcached
memcached:
  # -- Set to `true` if you want Memcached to be installed as well.
  bundled: true
  # -- Memcached server. This is required if you use an external memcached.
  #
  # See here for possible values: https://sendapatch.se/projects/pylibmc/reference.html
  server:
  auth:
    # -- This parameter is only used by the bundled memcached.
    enabled: true
    # -- Memcached username.
    username: "selfservice"
    # -- Memcached password.
    password: "easyPassword"
  # -- Defaults from /ucs/management/univention-self-service/conffiles/etc/memcached_univention-self-service.conf
  args:
    - "/opt/bitnami/scripts/memcached/run.sh"
    - "--memory-limit=64"
    - "--disable-evictions"


# -- PostgreSQL settings.
#
# The bitnami helm chart does contain all details of what can be configured:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Set to `true` if you want PostgreSQL to be installed as well.
  bundled: true
  # -- Connection parameters. These are required if you use an external database.
  connection:
    host:
    port:
  auth:
    username: "selfservice"
    database: "selfservice"
    password: "easyPassword"
    postgresPassword: "postgres"

...
