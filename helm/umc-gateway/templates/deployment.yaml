# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024-2025 Univention GmbH

---
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy: {{- include "common.tplvalues.render" (dict "value" .Values.updateStrategy "context" .) | nindent 4 }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.standard" . | nindent 8 }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets  }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: "copy-config"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - bash
            - -c
            - |
              mkdir -p /target/etc/univention /target/etc/apache2 /target/var/www/univention
              cp -a /etc/univention/* /target/etc/univention/
              cp -a /etc/apache2/* /target/etc/apache2/
              cp -a /var/www/univention/* /target/var/www/univention/
          volumeMounts:
            - name: "etc-apache2"
              mountPath: "/target/etc/apache2"
            - name: "var-www-univention"
              mountPath: "/target/var/www/univention"
            - name: "etc-univention"
              mountPath: "/target/etc/univention"
        - name: "prepare-config"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - bash
            - -c
            - |
              /entrypoint.d/50-entrypoint.sh
              echo "Listen {{ .Values.service.ports.http.containerPort }}" > /etc/apache2/ports.conf
              sed -e 's,<VirtualHost \*:80>,<VirtualHost *:{{ .Values.service.ports.http.containerPort }}>,g' -i /etc/apache2/sites-available/000-default.conf
              cat /etc/apache2/sites-available/000-default.conf
          volumeMounts:
            - name: "etc-apache2"
              mountPath: "/etc/apache2"
            - name: "var-www-univention"
              mountPath: "/var/www/univention"
            - name: "etc-univention"
              mountPath: "/etc/univention"
            - name: "config-cache"
              mountPath: "/var/cache/univention-config"
            - name: "univention-logs"
              mountPath: "/var/log/univention"
            {{- if (include "umc-gateway.configMapUcr" .) }}
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            {{- end }}
        - name: "load-internal-plugins"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.imagePullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/umc-icons
              cp -av /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/* /target/umc-icons
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.initResources "context" .) | nindent 12 }}

        {{- $systemExtensions := default (list) (coalesce .Values.systemExtensions .Values.global.systemExtensions) -}}
        {{- $extensions := default (list) (coalesce .Values.extensions .Values.global.extensions) -}}
        {{- range (concat $systemExtensions $extensions) }}
        - name: "load-{{ .name }}-extension"
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .image.registry $.Values.global.imageRegistry }}/{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ coalesce .image.imagePullPolicy $.Values.global.imagePullPolicy | quote }}
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          resources: {{- include "common.tplvalues.render" (dict "value" $.Values.initResources "context" $) | nindent 12 }}
        {{- end }}

      containers:
        - name: main
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- with .Values.image }}
          imagePullPolicy: {{ .pullPolicy }}
          {{- end }}
          command:
            - bash
            - -c
            - |
              apache2 -D FOREGROUND \
              -d /etc/apache2/ \
              -f /etc/apache2/apache2.conf
          volumeMounts:
            {{- if .Values.extraVolumeMounts }}
            {{ toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
            {{- if (include "umc-gateway.configMapUcr" .) }}
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            {{- end }}
            - name: plugin-targets
              mountPath: /usr/share/univention-management-console-frontend/js/dijit/themes/umc/icons/
              subPath: umc-icons
              readOnly: true
            - name: "apache2-logs"
              mountPath: "/usr/local/apache2/logs"
            - name: "etc-apache2"
              mountPath: "/etc/apache2"
              readOnly: true
            - name: "var-www-univention"
              mountPath: "/var/www/univention"
              readOnly: true
          ports:
            {{- range $key, $value := .Values.service.ports }}
            - name: {{ $key }}
              containerPort: {{ $value.containerPort }}
              protocol: {{ $value.protocol }}
            {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.ports.http.containerPort }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.service.ports.http.containerPort }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{- if .Values.extraVolumes }}
        {{ toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
        {{- if (include "umc-gateway.configMapUcr" .) }}
        - name: "config-map-ucr"
          configMap:
            name: {{ include "umc-gateway.configMapUcr" . | quote }}
        {{- end }}
        - name: plugin-targets
          emptyDir: { }
        - name: "apache2-logs"
          emptyDir:
            medium: "Memory"
        - name: "etc-apache2"
          emptyDir:
            medium: "Memory"
        - name: "var-www-univention"
          emptyDir:
            medium: "Memory"
        - name: "etc-univention"
          emptyDir:
            medium: "Memory"
        - name: "config-cache"
          emptyDir:
            medium: "Memory"
        - name: "univention-logs"
          emptyDir:
            medium: "Memory"
