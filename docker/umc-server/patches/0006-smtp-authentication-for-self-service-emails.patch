From d8eef6165f24c9d2a0b694357d40bf05ef4b36b8 Mon Sep 17 00:00:00 2001
From: Thomas Kintscher <thomas.kintscher.extern@univention.de>
Date: Wed, 10 Apr 2024 13:41:34 +0200
Subject: [PATCH 6/8] smtp authentication for self service emails

The password-reset functionality of the self-service sends a password-reset link
to the user's recovery email address.

In Nubus/openDesk operators may wish to configure their SMTP server,
which is already possible in UCS in terms of the SMTP server's hostname.

This patch adds configuration options regarding
- the SMTP port,
- the username for authentication,
- the EHLO string,
- whether to use STARTTLS, and
- the password for authentication.
---
 .../passwordreset/sending/send_email.py       | 29 ++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git management/univention-self-service/umc/python/passwordreset/sending/send_email.py management/univention-self-service/umc/python/passwordreset/sending/send_email.py
index 936cafbdcea..6e29a0d8737 100644
--- management/univention-self-service/umc/python/passwordreset/sending/send_email.py
+++ management/univention-self-service/umc/python/passwordreset/sending/send_email.py
@@ -48,6 +48,7 @@
 #
 
 import email.charset
+import os
 import os.path
 import smtplib
 from email.mime.nonmultipart import MIMENonMultipart
@@ -67,6 +68,26 @@ class SendEmail(UniventionSelfServiceTokenEmitter):
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
         self.server = self.ucr.get("umc/self-service/passwordreset/email/server", "localhost")
+        self.port = self.ucr.get_int("umc/self-service/passwordreset/email/server/port", 0)
+        self.user = self.ucr.get("umc/self-service/passwordreset/email/server/user")
+        self.ehlo = self.ucr.get("umc/self-service/passwordreset/email/server/ehlo")
+        self.starttls = self.ucr.is_true("umc/self-service/passwordreset/email/server/starttls")
+
+        if self.user:
+            self.password = os.getenv("SMTP_SECRET")
+            if not self.password:
+                secret_file = os.getenv("SMTP_SECRET_FILE")
+                try:
+                    with open(secret_file, 'r') as fd:
+                        self.password = fd.readline().strip()
+                except IOError:
+                    self.log("SMTP_SECRET_FILE (%s) could not be read." % secret_file)
+                    raise
+
+        if (self.user or self.starttls) and not self.ehlo:
+            hostname = self.ucr.get('hostname')
+            domainname = self.ucr.get('domainname')
+            self.ehlo = f"{hostname}.{domainname}"
 
     @staticmethod
     def send_method():
@@ -128,7 +149,13 @@ class SendEmail(UniventionSelfServiceTokenEmitter):
         msg["To"] = self.data["address"]
         msg.set_payload(txt, charset=cs)
 
-        smtp = smtplib.SMTP(self.server)
+        smtp = smtplib.SMTP(self.server, self.port)
+        if self.starttls:
+            smtp.ehlo(self.ehlo)
+            smtp.starttls()
+        if self.user:
+            smtp.ehlo(self.ehlo)
+            smtp.login(self.user, self.password)
         smtp.sendmail(msg["From"], self.data["address"], msg.as_string())
         smtp.quit()
         self.log("Sent mail with token to address {}.".format(self.data["address"]))
-- 
2.39.5

